{ pkgs ? import <nixpkgs> {
    config.android_sdk.accept_license = true;
    config.licenseAccepted = true;
    config.allowUnfree = true;
  }
, ...
}:
let
  android = {
    versions = {
      cmdLineToolsVersion = "13.0";
      platformTools = "35.0.2";
      buildTools = "35.0.0";
      ndk = "26.1.10909125";
      cmake = "3.22.1";
      emulator = "35.1.4";
    };

    platforms = [ "24" "34" "35" ];
    abis = [ "arm64-v8a" ];
    extras = [ "extras;google;gcm" ];
  };

  androidComposition = pkgs.androidenv.composeAndroidPackages {
    cmdLineToolsVersion = android.versions.cmdLineToolsVersion;
    platformToolsVersion = android.versions.platformTools;
    buildToolsVersions = [ android.versions.buildTools ];
    platformVersions = android.platforms;
    abiVersions = android.abis;

    emulatorVersion = android.versions.emulator;

    includeNDK = true;
    ndkVersions = [ android.versions.ndk ];
    cmakeVersions = [ android.versions.cmake ];

    useGoogleAPIs = true;
    includeExtras = android.extras;

    # Accepting more licenses declaratively:
    extraLicenses = [
      "android-sdk-preview-license"
      "android-googletv-license"
      "android-sdk-arm-dbt-license"
      "google-gdk-license"
      "intel-android-extra-license"
      "intel-android-sysimage-license"
      "mips-android-sysimage-license"
    ];
  };

  androidSdk = androidComposition.androidsdk;
  platformTools = androidComposition.platform-tools;
  jdk = pkgs.openjdk17;
in
pkgs.mkShell rec {
  packages = [
    androidSdk
    platformTools
    jdk
    pkgs.android-studio
    pkgs.nodejs
    pkgs.nodePackages.npm
  ];

  #buildInputs = [
  #  pkgs.nodejs
  #  pkgs.nodePackages.npm
  #];

  LANG = "C.UTF-8";
  LC_ALL = "C.UTF-8";
  JAVA_HOME = jdk.home;

  ANDROID_SDK_ROOT = "${androidSdk}/libexec/android-sdk";
  ANDROID_HOME = ANDROID_SDK_ROOT;
  ANDROID_NDK_ROOT = "${ANDROID_SDK_ROOT}/ndk/${android.versions.ndk}";
  GRADLE_OPTS = "-Dorg.gradle.project.android.aapt2FromMavenOverride=${ANDROID_SDK_ROOT}/build-tools/${android.versions.buildTools}/aapt2";

  shellHook = ''
    # Add cmake to the path.
    cmake_root="$(echo "$ANDROID_SDK_ROOT/cmake/${android.versions.cmake}"*/)"
    export PATH="$cmake_root/bin:$PATH"

    # Write out local.properties for Android Studio.
    cat <<EOF > local.properties
    # This file was automatically generated by nix-shell.
    sdk.dir=$ANDROID_SDK_ROOT
    ndk.dir=$ANDROID_NDK_ROOT
    cmake.dir=$cmake_root
    EOF
  '';
}




